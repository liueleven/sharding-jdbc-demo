# 配置数据源名称，不是数据库名称,这里的ds0对应sharding.jdbc.datasource.ds0这里的ds0
sharding.jdbc.datasource.names=ds0,ds1

# 数据源1
sharding.jdbc.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource
sharding.jdbc.datasource.ds0.driver-class-name=com.mysql.jdbc.Driver
sharding.jdbc.datasource.ds0.jdbc-url=jdbc:mysql://localhost:3306/ds0?characterEncoding=utf-8
sharding.jdbc.datasource.ds0.username=root
sharding.jdbc.datasource.ds0.password=root
#

# 数据源2
sharding.jdbc.datasource.ds1.type=com.zaxxer.hikari.HikariDataSource
sharding.jdbc.datasource.ds1.driver-class-name=com.mysql.jdbc.Driver
sharding.jdbc.datasource.ds1.jdbc-url=jdbc:mysql://localhost:3306/ds1?characterEncoding=utf-8
sharding.jdbc.datasource.ds1.username=root
sharding.jdbc.datasource.ds1.password=root


# 配置水平拆分分库分表的策略
# 分库键，利用表的哪个列作为分库键，这里address和user表都是用uid字段进行分库，它俩是绑定表
sharding.jdbc.config.sharding.default-database-strategy.inline.sharding-column=uid
# 行表达式，使用的是Groovy的语法，这里表示uid对2个库进行取模,ds$,$就是取模后的值,对应数据库的名称
# 行表达式使用: https://shardingsphere.apache.org/document/current/cn/features/sharding/other-features/inline-expression/
sharding.jdbc.config.sharding.default-database-strategy.inline.algorithm-expression=ds$->{uid % 2}
# 绑定表
sharding.jdbc.config.sharding.binding-tables=user,address

# 分库，配置 user 逻辑表的数据节点，uid用来分库
sharding.jdbc.config.sharding.tables.user.actual-data-nodes=ds$->{0..1}.user_$->{0..1}
# 分表，具体分到哪张表，取决于分表字段age
sharding.jdbc.config.sharding.tables.user.table-strategy.inline.sharding-column=age
# user表分片算法
sharding.jdbc.config.sharding.tables.user.table-strategy.inline.algorithm-expression=user_$->{age % 2}

# 配置 address 表的数据节点
sharding.jdbc.config.sharding.tables.address.actual-data-nodes=ds$->{0..1}.address_$->{0..1}
# 具体分到哪张表，取决于表字段aid
sharding.jdbc.config.sharding.tables.address.table-strategy.inline.sharding-column=aid
# address表分片算法
sharding.jdbc.config.sharding.tables.address.table-strategy.inline.algorithm-expression=address_$->{aid % 2}


# 广播表，所有表都会用到的表，作为广播表，例如字典表，这里code表就是字典表,多个用逗号“,”分隔，广播表的数据一般很少
sharding.jdbc.config.sharding.broadcast-tables=code
# 生成分布式主键，默认使用雪花算法，长度是18
sharding.jdbc.config.sharding.tables.code.key-generator-column-name=id

# 打印执行的sql
sharding.jdbc.config.sharding.props.sql.show=true
spring.main.allow-bean-definition-overriding=true
